/**
 * Map should be initialized only once. Following workarounds could be applied
 * 1. Add map_canvas with no meteor (jquery) once, the router is initialized
 * 2. Mark map_canvas div and check is the map initialized
 * 3. Init map not in meteor - by js is main html
 *
 */
mapWorkflow = undefined;



MapController = RouteController.extend({
	layoutTemplate: 'mapLayout',
	yieldTemplates: {
		MapFullsreenCanvas: {to: 'map'}
	},

	/*
	load: function() {
		da(['0.1.4'], "Load function");
		//d("This requires to refresh browser on code change");
		//trip = new Trip();
		//d("Load of MapController called - clean old subscribtions");
		Subs.ownTrips && Subs.ownTrips.stop();
		Subs.activeTrips && Subs.activeTrips.stop();
	},
	*/

	onBeforeAction: function() {
		da(['0.1.4'], "Rendering trip form");
		this.render('TripAddForm');

		var params = this.params;
  	var niceLink = params.niceLink;
  	var routeName = this.route.name;
  	var domain = window.location.hostname;

  	if(/marsrutas/i.test(domain) && this.path == "/") {
	  	da(['viewport-map'],"Special routing for domain:"+domain);
	  	Router.go("MapCountry");
			this.stop();
  	}

	  //da(['viewport-map'],"Special routing for small screens @MapController", this.route.name);
		this.render('MapFullsreenCanvas', {to: 'map'});
		if(Session.get("device-size").width < 768) {
			da(['long-trips'],"For small screens show EditTrip instead of "+routeName);
			if(routeName != 'EditTrip') {
				var context = self.params && _(self.params).pick("niceLink");
				Router.go(mapWorkflow.getPath('EditTrip', context, {}, trip));
				this.stop();
			}
		}

		da(['data-publish', 'viewport-map'],"Fetch query parameters");
		var query = {}
		// Convert query params to google LatLng
		var locFilter = _.pick(this.params, [
   		    'locFromLng','locFromLat','locToLng','locToLat'
   		]);
		if(locFilter.locFromLng) {
			var fromDistance = Session.get("fromRadius") || 10000;
			var fromLoc = [
			  parseFloat(locFilter.locFromLng),
				parseFloat(locFilter.locFromLat)
			];
			mapController.createLatLng(fromLoc, function (err, result) {
				trip.setFromLatLng(result)
			});
			var f = fromDistance * 180 / (3.14*6371*1000);
			query.fromLoc = {
				$near : fromLoc,
				$maxDistance : f
			};
		}
		if(locFilter.locToLng) {
			var toDistance = Session.get("toRadius") || 10000;
			var toLoc = [parseFloat(locFilter.locToLng),
								parseFloat(locFilter.locToLat)];
			mapController.createLatLng(toLoc, function (err, result) {
				trip.setToLatLng(result);
				mapController.dropToMarker(result);
			});
			var f = toDistance * 180 / (3.14*6371*1000);
			query.toLoc = {
				$near : toLoc,
				$maxDistance : f
			}
		}
		Subs.subscribe('ownTrips', Meteor.subscribe("ownTrips", niceLink));

		//da(['long-trips'],"Step is:", this.route.name);
		if('MapCountry' == this.route.name) {
			//da(['long-trips'],"Show long trips");
			tripClient.getActiveTrips = function() {
				// cannot bind as trips are in model.js wich is loaded later
				// FacebookMessages.find({   owner:{$ne: Meteor.userId()}, time: {$gte: new Date(new Date()-1000*60*60*24)}  });
				//da(['long-trips'],"Calling FacebookMessages");
				return CityTripWorker.prototype.getActiveTrips.call(tripClient, FacebookMessages, true);
			}
			Subs.subscribe('facebookFeed',Meteor.subscribe("facebookFeed", niceLink, query));
			da(['data-publish'], "1. Subscribed for long active trips:"+Meteor.userId()+"@"+niceLink, query);
			if(Subs.facebookFeed.ready()) {
				da(['data-publish'], "3. Subscribtion long active trips is ready:", query);
				tripClient.setActionProgress('activeTrips',100);
			} else {
				da(['data-publish'], "2. Subscribe to the long active trips:", query);
				tripClient.setActionProgress('activeTrips',0);
				return this.stop();
			}
		} else {
			//da(['data-publish','long-trips'],"Show city trips");
			tripClient.getActiveTrips = function() {
				// cannot bind as trips are in model.js wich is loaded later
				return CityTripWorker.prototype.getActiveTrips.call(tripClient, Trips);
			}
			console.log("Active trips");
			Subs.subscribe('activeTrips', Meteor.subscribe("activeTrips", niceLink, query));
			da(['data-publish'], "1. Subscribed for active trips:"+Meteor.userId()+"@"+niceLink, query);
			if(Subs.activeTrips.ready()) {
				da(['data-publish'], "3. Subscribtion active trips is ready:", query);
				tripClient.setActionProgress('activeTrips',100);
			} else {
				da(['data-publish'], "2. Subscribe to the active trips:", query);
				tripClient.setActionProgress('activeTrips',0);
				return this.stop();
			}
		}

		if(Subs.ownTrips.ready()) {
		  da(['data-publish'], "5. Subscribtion own trips is ready:"+niceLink, query);
			tripClient.setActionProgress('ownTrips',100);
		} else {
		  da(['data-publish'], "4. Subscribe to the group trips:"+niceLink, query);
			tripClient.setActionProgress('ownTrips',0);
			return this.stop();
		}
	},

	data: function() {
		if(!this.ready()) return
			
		var self = this;
		var params = this.params;

		if(params.tripId) {
			var loaded = TripBusinessLogic.getTrip(params.tripId);
			da(['trip-saving', 'long-trips'], "If param present load a trip:", loaded)
			trip = new Trip(loaded);
		}
		da(['viewport-map'], "MapController getting data");
		var trips = tripClient.getActiveTrips();
		return {
			currentTrip: function() {
				//da(['viewport-map'], "Getting trip:", trip);
				return trip;
			},
			route: self.route.name,
			activeTrips: trips,
			favoriteTrips: tripClient.getFavoriteTrips,
			myTrips: tripClient.getOwnTrips(),
			myGroups: tripClient.getMyGroups,
			alert: params.alert,
		}
	},
});

MapGroupController = MapController.extend({
	load: function() {
		//d("Setting MainPage (is used in profile at least):", this.params.niceLink, ['notifications-profile']);
		Session.set("pathForMain", Router.routes['MapGroup'].path(this.params));
	},
	before: function() {
		da(['viewport-map'],"MapGroupController:before");
		var params = this.params;
	  	var user = Meteor.user();
  		//d("Check the use is allowed to see the group
   		var group = Groups.findOne({niceLink: params.niceLink});
   		if(!group) {
   			Router.go("NewGroupConfirmation");
   		}
   		//d("User "+Meteor.userId()+" tries access group:"+params.niceLink, group, ['group-editing']);
   		if(!_.contains(group.members, Meteor.userId()) && group.owner != Meteor.userId()) {
  			Router.go("GroupRequest",{niceLink: params.niceLink});
   		}
	},
    data: function() {
    	var self = this;
		var params = this.params;
   		var group = Groups.findOne({niceLink: self.params.niceLink});

		var context = self.params && _(self.params).pick("niceLink");
		//da(['viewport-map'], "Group controller on top of security controller:"+step, context)
   		//d("If group doesn't exist redirect to edit group:"+self.params.niceLink, group, ['group-editing']);

		// do not call getActiveTrips every time - work with result
		var trips = tripClient.getActiveTrips();
		return {
			currentTrip: function() {
				//da(['viewport-map'], "Getting trip:", trip);
				return trip;
			},
			params: context,
			route: self.route.name,
    		group: group,
    		canEditGroup: function() {
    			return group.owner == Meteor.userId();
    		},
//    		activeTrips: tripClient.getActiveTrips(),
			activeTrips: trips,
    		favoriteTrips: tripClient.getFavoriteTrips,
			myTrips: tripClient.getOwnTrips(),
    		myGroups: tripClient.getMyGroups
    	}
    }
});

Template.TripAddForm.created = function() {
	var self = this;
	//da(['viewport-map', 'long-trips'],"Map created", this.data.params);

	// TODO these autoruns loose focus when new Trip is created - move to TripCapsule
	Deps.autorun(function() {
		var address = trip.getToAddress();
		//da(['viewport-map', 'long-trips'],"Setting toAddress", address);
		if(address != "") {
			//da(['viewport-map', 'long-trips'],"Got new toAddress - go to next step", address);
			Router.go(mapWorkflow.getPath('EditTrip', self.data.params, {}, trip));
		}
	});
	Deps.autorun(function() {
		if(trip.getFromAddress() != "") {
		}
	});
	Deps.autorun(function() {
		var latlng = trip.getToLatLng();
		//da(['long-trips'],"Autorun for getToLatLng:"+trip, latlng);
		if(latlng) {
			//da(['viewport-map', 'long-trips'],"Update url by changing to loc for:",self.data.params);
			Router.go(mapWorkflow.getPath(self.data.route, self.data.params, {}, trip));
		}
	});
	Deps.autorun(function() {
		var latlng = trip.getFromLatLng();
		//da(['long-trips'],"Autorun for getFromLatLng:"+trip, latlng);
		if(latlng) {
			try {
				mapController.setFromLatLng(latlng);
				//da(['viewport-map', 'long-trips'],"Update url by changing from loc for step:",self.data.params);
				Router.go(mapWorkflow.getPath(self.data.route, self.data.params, {}, trip));
			} catch(ex) {
				e("Caught error on from latlng change",ex)
			}
 		}
	});
};

Template.MapFullsreenCanvas.rendered = function() {
	mapController.initMap(document.getElementById('streets_map_canvas'));
}

Template.TripAddForm.rendered = function() {
	//da(['long-trips'],"Map rendered");
	mapController.runAfterMapInit(function(cb) {
		mapController.addAutomcomplete(document.getElementById('trip-toAddress'), function(addressText) {
			//d("Place changed:", arguments);
			trip.setToAddress(addressText);
		});
		mapController.addAutomcomplete(document.getElementById('trip-fromAddress'), function(addressText) {
			//d("Place changed:", arguments);
			trip.setFromAddress(addressText);
		});
		//da(['long-trips'], "Qyery current location, if trip fromLatLng is empty: "+trip);
		if(undefined == trip.fromLatLng) {
			mapController.getCurrentLocation(function(err, latlng) {
				//d("Maps got current location:"+trip, latlng)
				trip.setFromLatLng(latlng);
			});
		}
		// call next function
		cb && cb(null, null);
	});
}

Template.TripAddForm.events({
	'click .save': function (event, template) {
		if(!Meteor.user()) {
			$('#landing-login-accordion').collapse('show');
			var path = Router.current().path+"&alert=login"
			Session.set("workflow", Router.current().path);
			Router.go(path)
			return;
		}
		var query = _(trip).pick([
		  'toStreet','toHouse', 'toCity', 'toAddress',
		  'fromStreet','fromHouse', 'fromCity', 'fromAddress',
		  'time', 'path'
		]);
		query._id = trip._id;
		da(['trip-saving'],"Saving trip:", query);

		//TODO deprecated - tripTime is still used where Trip Class is not used
		query.tripTime = query.time;
		da(['viewport-map'], "Saving trip time:"+query._id, query.time);
		// for firefox add missing zeros
		query.role = $(event.currentTarget).val();
		query.group = template.data.group && template.data.group._id;

		query.toLoc = [trip.getToLatLng().lng(), trip.getToLatLng().lat()];
		query.fromLoc = [trip.getFromLatLng().lng(), trip.getFromLatLng().lat()];

		$('#save-button').button('loading');
		TripBusinessLogic.saveTrip(query, function(error, value) {
			$("*[id^='trip-to']").val("");
			Session.set("toLngLat", undefined);
			$('#save-button').button('reset');
			//d("Selecting saved trip", value);
			Session.set('selectedTrip', value);
		});
		//mapController.showTrip(query);
		//da(['viewport-map'],"Show starting page"+trip, template.data.params);
		backToHome(trip);
	},
});

function backToHome(trip) {
	da(['long-trips'],"Returning back to:", trip.group,['trip-edit']);
	if(trip.group) {
		var group = Groups.findOne(trip.group);
		Router.go('MapGroup', {niceLink: group.niceLink});
	} else {
		Router.go('Map')
	}
}
